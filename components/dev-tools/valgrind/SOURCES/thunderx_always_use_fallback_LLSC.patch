diff -ruN valgrind-3.12.0.old/coregrind/m_translate.c valgrind-3.12.0/coregrind/m_translate.c
--- valgrind-3.12.0.old/coregrind/m_translate.c	2017-05-11 13:39:50.234365395 +0100
+++ valgrind-3.12.0/coregrind/m_translate.c	2017-05-11 16:36:42.706129971 +0100
@@ -38,7 +38,9 @@
                                  // VG_(machine_get_VexArchInfo)
 #include "pub_core_libcbase.h"
 #include "pub_core_libcassert.h"
+#include "pub_core_libcfile.h"
 #include "pub_core_libcprint.h"
+#include "pub_core_mallocfree.h"
 #include "pub_core_options.h"
 
 #include "pub_core_debuginfo.h"  // VG_(get_fnname_w_offset)
@@ -1708,6 +1710,62 @@
 #  if defined(VGP_arm64_linux)
    vex_abiinfo.guest__use_fallback_LLSC
       = SimHintiS(SimHint_fallback_llsc, VG_(clo_sim_hints));
+   {
+      Int n, fh;
+      SysRes fd;
+      SizeT num_bytes, file_buf_size;
+      HChar  *file_buf, *impl, *p;
+      const char *search_Implementer_str = "CPU implementer";
+
+      /* Slurp contents of /proc/cpuinfo into FILE_BUF */
+      fd = VG_(open)( "/proc/cpuinfo", 0, VKI_S_IRUSR );
+      if ( !sr_isError(fd) )
+      {
+         fh  = sr_Res(fd);
+
+         /* Determine the size of /proc/cpuinfo.
+            Work around broken-ness in /proc file system implementation.
+            fstat returns a zero size for /proc/cpuinfo although it is
+            claimed to be a regular file. */
+         num_bytes = 0;
+         file_buf_size = 1000;
+         file_buf = VG_(malloc)("cpuinfo", file_buf_size + 1);
+         while (42) {
+            n = VG_(read)(fh, file_buf, file_buf_size);
+            if (n < 0) break;
+
+            num_bytes += n;
+            if (n < file_buf_size) break;  /* reached EOF */
+         }
+
+         if (n < 0) num_bytes = 0;   /* read error; ignore contents */
+
+         if (num_bytes > file_buf_size) {
+            VG_(free)( file_buf );
+            VG_(lseek)( fh, 0, VKI_SEEK_SET );
+            file_buf = VG_(malloc)( "cpuinfo", num_bytes + 1 );
+            n = VG_(read)( fh, file_buf, num_bytes );
+           if (n < 0) num_bytes = 0;
+         }
+
+         file_buf[num_bytes] = '\0';
+         VG_(close)(fh);
+
+         impl = VG_(strstr)(file_buf, search_Implementer_str);
+         if (impl) {
+            for (p = impl; '\0' != *p; p++) {
+               if ('\n' == *p) {
+                  *p = '\0';
+                  break;
+               }
+            }
+            if (VG_(strstr)(impl, "0x43")) {
+               vex_abiinfo.guest__use_fallback_LLSC = True;
+            }
+         }
+         VG_(free)(file_buf);
+      }
+   }
 #  endif
 
    /* Set up closure args. */
