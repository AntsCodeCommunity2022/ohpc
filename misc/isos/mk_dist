#!/usr/bin/env perl

use strict;
use warnings;
use Digest::MD5 qw(md5_hex); 
use File::Path;
use File::Copy::Recursive qw(dircopy);
use Getopt::Long;

#my @arches = ('aarch64', 'x86_64');
#my @distros = ('CentOS_7.2', 'SLE_12_SP1');
# debug for testing...
my @arches = ('x86_64');
my @distros = ('CentOS_7.2');

my $base_repo_path = "/srv/obs/repos/OpenHPC:";
my $dest_dir = "/srv/www/dist";
my $tmp_dir = "/srv/tmp/dist/mk_dist.$$";

# basic usage
sub usage { 
    print "\n";
    print "Usage: mk_dist [OPTIONS]\n\n";
    print "OPTIONS:\n";
    print "  --skip-copy           skip copying of repo data (for debug only)\n";
    print "  --help                generate help message and exit\n";
    print "\n";
    exit 0;
}

# enable autoflush
$| = 1;

# Command-line parsing
my $skipCopy = 0;
my $help = 0;

GetOptions('skip-copy' => \$skipCopy,
	   "h"             => \$help,
           "help"          => \$help);

usage() if ($help);


# query expected environment variables
my $release;
my $overwrite=0;

if(defined $ENV{'Version'}) {
    $release = $ENV{'Version'};
} else {
    die "Version environment variable not set!\n";
}

if(defined $ENV{'OverWritePrevoius'} ) {
    if ($ENV{'OverWritePrevious'} eq "true") { $overwrite=1; }
} 

print "OpenHPC dist creation utility\n";
print "--> Requested release version = $release\n";
print "--> Overwrite existing dists  = $overwrite\n";

# parse release
my ($major, $minor, $micro) = split(/\./, $release);
my $base_release = "$major.$minor";

# stage repo in tmp
print "\nStaging dist creation in $tmp_dir...\n";
die "Unable to create $tmp_dir: $!\n" unless(mkdir $tmp_dir);

if( !$skipCopy) {

    # copy base repo contents
    print "\nCopying base repo contents from OBS...\n";
    unless(dircopy("$base_repo_path/$base_release", $tmp_dir)) {
        die "Unable to copy $base_repo_path/$base_release to $tmp_dir: $!";
    }
    print "--> base repo copy complete\n";

   # build update repo
    if ($micro) {
        #TODO: support update repo merge
        print "\nCopying updates\n";
         "$tmp_dir/updates" || warn "Unable to remove updates link: $!";
         "$tmp_dir/empty" || warn "Unable to remove empty dir: $!";
        ("$base_repo_path/$base_release:/Update$micro/*", "$tmp_dir/updates") ||
            die "Unable to copy update repo: $!";
    }
}

# build dist + TODO: md5s

my $md5sum_file = "$dest_dir/OpenHPC:$release.md5s";
open (MD5, ">", $md5sum_file) ||
    die "Couldn't open $md5sum_file: $!";

foreach my $distro (@distros) {
    if ($micro) {
	symlink("$tmp_dir/updates/$distro", "$tmp_dir/$distro/updates");
    }
    my @n_distros = grep { $_ ne $distro } @distros;
    # generate binary tarballs
    foreach my $arch (@arches) {
	my $dist_filename = "$dest_dir/OpenHPC-$release.$distro\_$arch.tar";
	my $tar_args = "-cvf $dist_filename \\\n";
	
	# exclude other arches, iso and src dirs
	my @n_arches = grep { $_ ne $arch } @arches;
	for my $n_arch (@n_arches) {
	    $tar_args .= "--exclude $tmp_dir/$distro/$n_arch \\\n";
	}
	$tar_args .= "--exclude $tmp_dir/$distro/iso \\\n";
	$tar_args .= "--exclude $tmp_dir/$distro/src \\\n";
	
	# exclude any other distro updates
	if ($micro) {
	    for my $n_distro (@n_distros) {
		$tar_args .= "--exclude $tmp_dir/$distro/updates/$n_distro \\\n";
	    }
	}
	
	$tar_args .= " $tmp_dir/$distro";
	print "\nCreating dist for $distro:$arch -- \n";
	system("tar $tar_args");
	
	my $md5sum;
	open (DIST, "<", $dist_filename) ||
	    die "Unable to open $dist_filename: $!";
	binmode DIST;
	my $data = <DIST>;
	close DIST;
	$md5sum = md5_hex($data);
	printf MD5 "%s  %s\n", $dist_filename, $md5sum;
    }
    
    # generate src tarball
    my $src_filename = "$dest_dir/OpenHPC-$release.$distro\_src.tar";
    my $tar_args = "-cvf $src_filename \\\n";
    for my $arch (@arches) {
	$tar_args .= "--exclude $tmp_dir/$distro/$arch \\\n";
    }
    # exclude any other distro/arch updates
    if ($micro) {
	for my $arch (@arches) {
	    $tar_args .= "--exclude $tmp_dir/$distro/updates/$arch \\\n";
	}
	for my $n_distro (@n_distros) {
	    $tar_args .= "--exclude $tmp_dir/$distro/updates/$n_distro \\\n";
	}
    }
    $tar_args .= "--exclude $tmp_dir/$distro/iso \\\n";
    $tar_args .= " $tmp_dir/$distro";

    # add .repo file(s)

    print "Adding [base] repofile contents\n";
    copy("repo.base.in","$tmp_dir/$distro/OpenHPC.local.repo") || die "Unable to copy repo.base.in\n";
    if($micro) {
	print "Adding [update] repofile contents\n";
	open (BASE, ">>","$tmp_dir/$distro/OpenHPC.local.repo") || die "Unable to append to repo file\n";
	open (UPDATE,"<","repo.update.in") || die "Unable to access repo.update.in\n";
	print BASE <UPDATE>;
	close BASE;
	close UPDATE;
    }

    print "dist for $distro:src -- \n";
    system("tar $tar_args");
    
    my $md5sum;
    open (DIST, "<", $src_filename) ||
	die "Unable to open $src_filename: $!";
    binmode DIST;
    my $data = <DIST>;
    close DIST;
    $md5sum = md5_hex($data);
    printf MD5 "%s  %s\n", $src_filename, $md5sum;
}

close(MD5);

unless(rmtree $tmp_dir) {
    die "Unable to remove $tmp_dir: $!\n";
}

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4 
