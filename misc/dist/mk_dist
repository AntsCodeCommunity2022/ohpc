#!/usr/bin/env perl

use strict;
use warnings;
use Digest::MD5 qw(md5_hex); 
use File::Path;
use File::Copy::Recursive qw(dircopy);
use Getopt::Long;
use File::Temp qw(tempfile);
use Path::Tiny qw(path);

my @arches = ('aarch64', 'x86_64');
my @distros = ('CentOS_7.2', 'SLE_12_SP1');

my $base_repo_path = "/srv/obs/repos/OpenHPC:";
my $dest_dir = "/srv/www/dist";
my $tmp_path = "/srv/tmp/dist";

# basic usage
sub usage { 
    print "\n";
    print "Usage: mk_dist [OPTIONS]\n\n";
    print "OPTIONS:\n";
    print "  --skip-copy           skip copying of repo data (for debug only)\n";
    print "  --help                generate help message and exit\n";
    print "\n";
    exit 0;
}

# enable autoflush
$| = 1;

# Command-line parsing
my $skipCopy = 0;
my $help = 0;

GetOptions('skip-copy' => \$skipCopy,
	   "h"             => \$help,
           "help"          => \$help);

usage() if ($help);


# query expected environment variables
my $release;
my $overwrite=0;

if(defined $ENV{'Version'}) {
    $release = $ENV{'Version'};
} else {
    die "Version environment variable not set!\n";
}

if(defined $ENV{'OverWritePrevoius'} ) {
    if ($ENV{'OverWritePrevious'} eq "true") { $overwrite=1; }
} 

if ( ! -d $dest_dir ) {
    File::Path::make_path($dest_dir) || die("Unable to create $dest_dir\n");
}

print "OpenHPC dist creation utility\n";
print "--> Requested release version = $release\n";
print "--> Overwrite existing dists  = $overwrite\n";

if($skipCopy) {
    print "--> Debug skipCopy option     = 1\n";
}

# parse release
my ($major, $minor, $micro) = split(/\./, $release);
my $base_release = "$major.$minor";

# stage repo in tmp

if (! -d $tmp_path) {
    File::Path::make_path($tmp_path) || die("Unable to create $tmp_path\n");
}

my $tmp_dir = File::Temp::tempdir(CLEANUP => 1, DIR=> $tmp_path) || MYERROR("Unable to create temporary directory");

print "\nStaging dist creation in $tmp_dir...\n";

if( !$skipCopy) {

    # copy base repo contents
    print "\nCopying base repo contents from OBS...\n";
    unless(dircopy("$base_repo_path/$base_release", $tmp_dir)) {
        die "Unable to copy $base_repo_path/$base_release to $tmp_dir: $!";
    }
    print "--> base repo copy complete\n";

   # build update repo
    if ($micro) {
        #TODO: support update repo merge
        print "\nCopying updates\n";
        unlink "$tmp_dir/updates" || warn "Unable to remove updates link: $!";
        rmtree "$tmp_dir/empty" || warn "Unable to remove empty dir: $!";
        dircopy("$base_repo_path/$base_release:/Update$micro/*", "$tmp_dir/updates") ||
            die "Unable to copy update repo: $!";
    }
}

# build dist + md5s

my $md5sum_file = "$dest_dir/OpenHPC-$release.md5s";
open (MD5, ">", $md5sum_file) ||
    die "Couldn't open $md5sum_file: $!";

foreach my $distro (@distros) {
    if ($micro) {
	dircopy("$tmp_dir/updates/$distro", "$tmp_dir/$distro/updates");
    }
    my @n_distros = grep { $_ ne $distro } @distros;
    # generate binary tarballs
    foreach my $arch (@arches) {
	my $dist_filename = "$dest_dir/OpenHPC-$release.$distro\_$arch.tar";
	my $tar_args = "-cvf $dist_filename \\\n";

	
	# exclude other arches, iso and src dirs
	my @n_arches = grep { $_ ne $arch } @arches;
	for my $n_arch (@n_arches) {
	    $tar_args .= "--exclude $distro/$n_arch \\\n";
	}
	$tar_args .= "--exclude $distro/iso \\\n";
	$tar_args .= "--exclude $distro/src \\\n";
	
	# exclude any other distro updates
	if ($micro) {
	    for my $n_distro (@n_distros) {
		$tar_args .= "--exclude $distro/updates/$n_distro \\\n";
	    }
	}

	# exclude any OBS created .repo files
	$tar_args .= "--exclude $distro/OpenHPC*.repo \\\n";
	$tar_args .= "--exclude $distro/updates/OpenHPC*.repo \\\n";

	# cd to $tmp_dir
	$tar_args .= "-C $tmp_dir \\\n";

	# add .repo file

	my $repoFile="$tmp_dir/OpenHPC.local.repo";

	if($skipCopy) {
	    File::Path::make_path("$tmp_dir/$distro") || die("Unable to create $tmp_dir/$distro\n");
	}
	print "Adding [base] repofile contents -> $repoFile\n";

	File::Copy::copy("repo.base.in","$repoFile") || die "Unable to copy repo.base.in\n";
	if($micro) {
	    print "Appending [update] repo\n";
	    open (BASE, ">>","$repoFile") || die "Unable to append to repo file\n";
	    open (UPDATE,"<","repo.update.in") || die "Unable to access repo.update.in\n";
	    print BASE <UPDATE>;
	    close BASE;
	    close UPDATE;
	}

	# Update version strings in .repo file

	my $file_update = path($repoFile);
	my $contents    = $file_update->slurp_utf8;
	$contents       =~ s/\@VERSION_MINOR\@/$base_release/g;
	$contents       =~ s/\@VERSION_MICRO\@/$release/g;
	$contents       =~ s/\@DIST\@/$distro/g;
	$file_update->spew_utf8( $contents );

	# Copy mk_repo utility
	print "Adding mk_repo utility\n";
	File::Copy::copy("mk_repo","$tmp_dir") || die "Unable to copy mk_repo\n";
	chmod 0700, "/tmp_dir/mk_repo" || die "Unable to set perms for mk_repo\n";

	# Assemble final tarball
	$tar_args .= "$distro mk_repo OpenHPC.local.repo";
	print "\nCreating dist tarball for $distro:$arch -- \n";
	print "\ntar command -> tar $tar_args\n\n";
	system("tar $tar_args");

	my $md5sum;
        local $/ = undef;
	open DIST, "$dist_filename" ||
	    die "Unable to open $dist_filename: $!";
	my $data = <DIST>;
	close DIST;
	$md5sum = md5_hex($data);
	printf MD5 "%s  OpenHPC-%s.%s_%s.tar\n", $md5sum, $release, $distro, $arch;
    }
    
    # generate src tarball
    my $src_filename = "$dest_dir/OpenHPC-$release.$distro\_src.tar";
    my $tar_args = "-cvf $src_filename \\\n";

    for my $arch (@arches) {
	$tar_args .= "--exclude $distro/$arch \\\n";
    }
    # exclude any other distro/arch updates
    if ($micro) {
	for my $arch (@arches) {
	    $tar_args .= "--exclude $distro/updates/$arch \\\n";
	}
	for my $n_distro (@n_distros) {
	    $tar_args .= "--exclude $distro/updates/$n_distro \\\n";
	}
    }

    # exclude any OBS created .repo files
    $tar_args .= "--exclude $distro/OpenHPC*.repo \\\n";
    $tar_args .= "--exclude $distro/updates/OpenHPC*.repo \\\n";
	
    $tar_args .= "--exclude $distro/iso \\\n";
    $tar_args .= "-C $tmp_dir \\\n";
    $tar_args .= "$distro mk_repo";

    print "\nCreating dist tarball for $distro:src -- \n";
    print "\ntar command -> tar $tar_args\n\n";
    system("tar $tar_args");
    
    my $md5sum;
    local $/ = undef;
    open DIST, "$src_filename" ||
	die "Unable to open $src_filename: $!";
    my $data = <DIST>;
    close DIST;
    $md5sum = md5_hex($data);
    printf MD5 "%s  OpenHPC-%s.%s_src.tar\n", $md5sum, $release, $distro;
}

close(MD5);

unless(rmtree $tmp_dir) {
    die "Unable to remove $tmp_dir: $!\n";
}

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4 
